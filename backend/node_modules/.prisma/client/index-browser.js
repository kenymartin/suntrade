
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  country: 'country',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  addressTypeId: 'addressTypeId',
  createdBy: 'createdBy',
  isPrivate: 'isPrivate',
  contactId: 'contactId',
  zipcode: 'zipcode'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  cardTypeId: 'cardTypeId',
  userId: 'userId',
  cardNumber: 'cardNumber',
  expirationDate: 'expirationDate',
  CVV: 'CVV',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  isDefault: 'isDefault',
  contactId: 'contactId'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  solarPanelId: 'solarPanelId',
  quantity: 'quantity',
  contactId: 'contactId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.CompanyScalarFieldEnum = {
  companyName: 'companyName',
  website: 'website',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  id: 'id',
  contactId: 'contactId'
};

exports.Prisma.ComponentScalarFieldEnum = {
  id: 'id',
  description: 'description',
  lenght: 'lenght',
  width: 'width',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  componentTypeId: 'componentTypeId',
  productPriceId: 'productPriceId'
};

exports.Prisma.ComponentTypeScalarFieldEnum = {
  id: 'id',
  description: 'description',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  packagingTypeId: 'packagingTypeId',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ComponentsByProductScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  componentId: 'componentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  quantity: 'quantity'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  dob: 'dob',
  stateId: 'stateId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  middlename: 'middlename',
  positionTypeId: 'positionTypeId',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  accountTypeId: 'accountTypeId'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailTypeId: 'emailTypeId',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  contactId: 'contactId'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  SKU: 'SKU',
  productName: 'productName',
  description: 'description',
  quantityInStock: 'quantityInStock',
  unitPrice: 'unitPrice',
  discount: 'discount',
  categoryId: 'categoryId',
  supplierId: 'supplierId'
};

exports.Prisma.MeasurementScalarFieldEnum = {
  id: 'id',
  length: 'length',
  width: 'width',
  orderId: 'orderId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  title: 'title',
  userId: 'userId',
  orderStatusId: 'orderStatusId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  orderDate: 'orderDate',
  toTalPrice: 'toTalPrice'
};

exports.Prisma.OrderDetailsScalarFieldEnum = {
  id: 'id',
  quanity: 'quanity',
  productId: 'productId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  orderId: 'orderId'
};

exports.Prisma.OrderStatusScalarFieldEnum = {
  id: 'id',
  Description: 'Description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  paymentMethodId: 'paymentMethodId',
  paymentStatusId: 'paymentStatusId',
  orderId: 'orderId'
};

exports.Prisma.PaymentDetailScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  orderId: 'orderId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentStatusScalarFieldEnum = {
  id: 'id',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.PhoneScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  phoneTypeId: 'phoneTypeId',
  isPrimary: 'isPrimary',
  contactId: 'contactId'
};

exports.Prisma.ProductPriceScalarFieldEnum = {
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  price: 'price',
  productId: 'productId',
  id: 'id'
};

exports.Prisma.ProductViewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  description: 'description',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  isActive: 'isActive'
};

exports.Prisma.RoleByUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.SalesScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantitySold: 'quantitySold',
  unitPrice: 'unitPrice',
  discount: 'discount',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  isDeleted: 'isDeleted',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  orderId: 'orderId'
};

exports.Prisma.ShippingInfoScalarFieldEnum = {
  id: 'id',
  recipientName: 'recipientName',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  shippingCarrrierName: 'shippingCarrrierName',
  reviewId: 'reviewId',
  rating: 'rating',
  orderId: 'orderId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  isDeleted: 'isDeleted',
  imageUrl: 'imageUrl',
  productPriceId: 'productPriceId',
  typeId: 'typeId'
};

exports.Prisma.ProductRatingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  solarPanelId: 'solarPanelId',
  retingDate: 'retingDate'
};

exports.Prisma.ProductReviewsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  reviewDate: 'reviewDate',
  reviewText: 'reviewText'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  email: 'email',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  password: 'password',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  username: 'username',
  contactId: 'contactId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Address: 'Address',
  Card: 'Card',
  Cart: 'Cart',
  Category: 'Category',
  Company: 'Company',
  Component: 'Component',
  ComponentType: 'ComponentType',
  ComponentsByProduct: 'ComponentsByProduct',
  Contact: 'Contact',
  Email: 'Email',
  Inventory: 'Inventory',
  Measurement: 'Measurement',
  Order: 'Order',
  OrderDetails: 'OrderDetails',
  OrderStatus: 'OrderStatus',
  Payment: 'Payment',
  PaymentDetail: 'PaymentDetail',
  PaymentStatus: 'PaymentStatus',
  Phone: 'Phone',
  ProductPrice: 'ProductPrice',
  ProductView: 'ProductView',
  Role: 'Role',
  RoleByUser: 'RoleByUser',
  Sales: 'Sales',
  ShippingInfo: 'ShippingInfo',
  Product: 'Product',
  ProductRatings: 'ProductRatings',
  ProductReviews: 'ProductReviews',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
